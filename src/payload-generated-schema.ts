/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-postgres";
import {
  pgSchema,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  serial,
  varchar,
  timestamp,
  numeric,
  jsonb,
  boolean,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-postgres/drizzle";
export const db_schema = pgSchema("cms");
export const enum_users_roles = db_schema.enum("enum_users_roles", [
  "editor",
  "admin",
]);
export const enum_articles_status = db_schema.enum("enum_articles_status", [
  "draft",
  "in_review",
  "published",
  "rejected",
]);
export const enum__articles_v_version_status = db_schema.enum(
  "enum__articles_v_version_status",
  ["draft", "in_review", "published", "rejected"],
);

export const users_roles = db_schema.table(
  "users_roles",
  {
    order: integer("order").notNull(),
    parent: integer("parent_id").notNull(),
    value: enum_users_roles("value"),
    id: serial("id").primaryKey(),
  },
  (columns) => ({
    orderIdx: index("users_roles_order_idx").on(columns.order),
    parentIdx: index("users_roles_parent_idx").on(columns.parent),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [users.id],
      name: "users_roles_parent_fk",
    }).onDelete("cascade"),
  }),
);

export const users_sessions = db_schema.table(
  "users_sessions",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    expiresAt: timestamp("expires_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("users_sessions_order_idx").on(columns._order),
    _parentIDIdx: index("users_sessions_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_sessions_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const users = db_schema.table(
  "users",
  {
    id: serial("id").primaryKey(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const organizations = db_schema.table(
  "organizations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    slug: varchar("slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    organizations_slug_idx: uniqueIndex("organizations_slug_idx").on(
      columns.slug,
    ),
    organizations_updated_at_idx: index("organizations_updated_at_idx").on(
      columns.updatedAt,
    ),
    organizations_created_at_idx: index("organizations_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const tags = db_schema.table(
  "tags",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    slug: varchar("slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tags_name_idx: uniqueIndex("tags_name_idx").on(columns.name),
    tags_slug_idx: uniqueIndex("tags_slug_idx").on(columns.slug),
    tags_updated_at_idx: index("tags_updated_at_idx").on(columns.updatedAt),
    tags_created_at_idx: index("tags_created_at_idx").on(columns.createdAt),
  }),
);

export const articles = db_schema.table(
  "articles",
  {
    id: serial("id").primaryKey(),
    status: enum_articles_status("status").default("draft"),
    title: varchar("title"),
    slug: varchar("slug"),
    summary: varchar("summary"),
    body: jsonb("body"),
    sourceUrl: varchar("source_url"),
    canonicalUrl: varchar("canonical_url"),
    author: varchar("author"),
    publishedAtExternal: timestamp("published_at_external", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    organization: integer("organization_id").references(
      () => organizations.id,
      {
        onDelete: "set null",
      },
    ),
    rawDiscoveryId: varchar("raw_discovery_id"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_articles_status("_status").default("draft"),
  },
  (columns) => ({
    articles_slug_idx: uniqueIndex("articles_slug_idx").on(columns.slug),
    articles_organization_idx: index("articles_organization_idx").on(
      columns.organization,
    ),
    articles_updated_at_idx: index("articles_updated_at_idx").on(
      columns.updatedAt,
    ),
    articles_created_at_idx: index("articles_created_at_idx").on(
      columns.createdAt,
    ),
    articles__status_idx: index("articles__status_idx").on(columns._status),
  }),
);

export const articles_rels = db_schema.table(
  "articles_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    tagsID: integer("tags_id"),
  },
  (columns) => ({
    order: index("articles_rels_order_idx").on(columns.order),
    parentIdx: index("articles_rels_parent_idx").on(columns.parent),
    pathIdx: index("articles_rels_path_idx").on(columns.path),
    articles_rels_tags_id_idx: index("articles_rels_tags_id_idx").on(
      columns.tagsID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [articles.id],
      name: "articles_rels_parent_fk",
    }).onDelete("cascade"),
    tagsIdFk: foreignKey({
      columns: [columns["tagsID"]],
      foreignColumns: [tags.id],
      name: "articles_rels_tags_fk",
    }).onDelete("cascade"),
  }),
);

export const _articles_v = db_schema.table(
  "_articles_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => articles.id, {
      onDelete: "set null",
    }),
    version_status:
      enum__articles_v_version_status("version_status").default("draft"),
    version_title: varchar("version_title"),
    version_slug: varchar("version_slug"),
    version_summary: varchar("version_summary"),
    version_body: jsonb("version_body"),
    version_sourceUrl: varchar("version_source_url"),
    version_canonicalUrl: varchar("version_canonical_url"),
    version_author: varchar("version_author"),
    version_publishedAtExternal: timestamp("version_published_at_external", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_organization: integer("version_organization_id").references(
      () => organizations.id,
      {
        onDelete: "set null",
      },
    ),
    version_rawDiscoveryId: varchar("version_raw_discovery_id"),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__articles_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean("latest"),
  },
  (columns) => ({
    _articles_v_parent_idx: index("_articles_v_parent_idx").on(columns.parent),
    _articles_v_version_version_slug_idx: index(
      "_articles_v_version_version_slug_idx",
    ).on(columns.version_slug),
    _articles_v_version_version_organization_idx: index(
      "_articles_v_version_version_organization_idx",
    ).on(columns.version_organization),
    _articles_v_version_version_updated_at_idx: index(
      "_articles_v_version_version_updated_at_idx",
    ).on(columns.version_updatedAt),
    _articles_v_version_version_created_at_idx: index(
      "_articles_v_version_version_created_at_idx",
    ).on(columns.version_createdAt),
    _articles_v_version_version__status_idx: index(
      "_articles_v_version_version__status_idx",
    ).on(columns.version__status),
    _articles_v_created_at_idx: index("_articles_v_created_at_idx").on(
      columns.createdAt,
    ),
    _articles_v_updated_at_idx: index("_articles_v_updated_at_idx").on(
      columns.updatedAt,
    ),
    _articles_v_latest_idx: index("_articles_v_latest_idx").on(columns.latest),
  }),
);

export const _articles_v_rels = db_schema.table(
  "_articles_v_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    tagsID: integer("tags_id"),
  },
  (columns) => ({
    order: index("_articles_v_rels_order_idx").on(columns.order),
    parentIdx: index("_articles_v_rels_parent_idx").on(columns.parent),
    pathIdx: index("_articles_v_rels_path_idx").on(columns.path),
    _articles_v_rels_tags_id_idx: index("_articles_v_rels_tags_id_idx").on(
      columns.tagsID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [_articles_v.id],
      name: "_articles_v_rels_parent_fk",
    }).onDelete("cascade"),
    tagsIdFk: foreignKey({
      columns: [columns["tagsID"]],
      foreignColumns: [tags.id],
      name: "_articles_v_rels_tags_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_locked_documents = db_schema.table(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = db_schema.table(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    organizationsID: integer("organizations_id"),
    tagsID: integer("tags_id"),
    articlesID: integer("articles_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_organizations_id_idx: index(
      "payload_locked_documents_rels_organizations_id_idx",
    ).on(columns.organizationsID),
    payload_locked_documents_rels_tags_id_idx: index(
      "payload_locked_documents_rels_tags_id_idx",
    ).on(columns.tagsID),
    payload_locked_documents_rels_articles_id_idx: index(
      "payload_locked_documents_rels_articles_id_idx",
    ).on(columns.articlesID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    organizationsIdFk: foreignKey({
      columns: [columns["organizationsID"]],
      foreignColumns: [organizations.id],
      name: "payload_locked_documents_rels_organizations_fk",
    }).onDelete("cascade"),
    tagsIdFk: foreignKey({
      columns: [columns["tagsID"]],
      foreignColumns: [tags.id],
      name: "payload_locked_documents_rels_tags_fk",
    }).onDelete("cascade"),
    articlesIdFk: foreignKey({
      columns: [columns["articlesID"]],
      foreignColumns: [articles.id],
      name: "payload_locked_documents_rels_articles_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = db_schema.table(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = db_schema.table(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = db_schema.table(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const relations_users_roles = relations(users_roles, ({ one }) => ({
  parent: one(users, {
    fields: [users_roles.parent],
    references: [users.id],
    relationName: "roles",
  }),
}));
export const relations_users_sessions = relations(
  users_sessions,
  ({ one }) => ({
    _parentID: one(users, {
      fields: [users_sessions._parentID],
      references: [users.id],
      relationName: "sessions",
    }),
  }),
);
export const relations_users = relations(users, ({ many }) => ({
  roles: many(users_roles, {
    relationName: "roles",
  }),
  sessions: many(users_sessions, {
    relationName: "sessions",
  }),
}));
export const relations_organizations = relations(organizations, () => ({}));
export const relations_tags = relations(tags, () => ({}));
export const relations_articles_rels = relations(articles_rels, ({ one }) => ({
  parent: one(articles, {
    fields: [articles_rels.parent],
    references: [articles.id],
    relationName: "_rels",
  }),
  tagsID: one(tags, {
    fields: [articles_rels.tagsID],
    references: [tags.id],
    relationName: "tags",
  }),
}));
export const relations_articles = relations(articles, ({ one, many }) => ({
  organization: one(organizations, {
    fields: [articles.organization],
    references: [organizations.id],
    relationName: "organization",
  }),
  _rels: many(articles_rels, {
    relationName: "_rels",
  }),
}));
export const relations__articles_v_rels = relations(
  _articles_v_rels,
  ({ one }) => ({
    parent: one(_articles_v, {
      fields: [_articles_v_rels.parent],
      references: [_articles_v.id],
      relationName: "_rels",
    }),
    tagsID: one(tags, {
      fields: [_articles_v_rels.tagsID],
      references: [tags.id],
      relationName: "tags",
    }),
  }),
);
export const relations__articles_v = relations(
  _articles_v,
  ({ one, many }) => ({
    parent: one(articles, {
      fields: [_articles_v.parent],
      references: [articles.id],
      relationName: "parent",
    }),
    version_organization: one(organizations, {
      fields: [_articles_v.version_organization],
      references: [organizations.id],
      relationName: "version_organization",
    }),
    _rels: many(_articles_v_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    organizationsID: one(organizations, {
      fields: [payload_locked_documents_rels.organizationsID],
      references: [organizations.id],
      relationName: "organizations",
    }),
    tagsID: one(tags, {
      fields: [payload_locked_documents_rels.tagsID],
      references: [tags.id],
      relationName: "tags",
    }),
    articlesID: one(articles, {
      fields: [payload_locked_documents_rels.articlesID],
      references: [articles.id],
      relationName: "articles",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);

type DatabaseSchema = {
  db_schema: typeof db_schema;
  enum_users_roles: typeof enum_users_roles;
  enum_articles_status: typeof enum_articles_status;
  enum__articles_v_version_status: typeof enum__articles_v_version_status;
  users_roles: typeof users_roles;
  users_sessions: typeof users_sessions;
  users: typeof users;
  organizations: typeof organizations;
  tags: typeof tags;
  articles: typeof articles;
  articles_rels: typeof articles_rels;
  _articles_v: typeof _articles_v;
  _articles_v_rels: typeof _articles_v_rels;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_users_roles: typeof relations_users_roles;
  relations_users_sessions: typeof relations_users_sessions;
  relations_users: typeof relations_users;
  relations_organizations: typeof relations_organizations;
  relations_tags: typeof relations_tags;
  relations_articles_rels: typeof relations_articles_rels;
  relations_articles: typeof relations_articles;
  relations__articles_v_rels: typeof relations__articles_v_rels;
  relations__articles_v: typeof relations__articles_v;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
