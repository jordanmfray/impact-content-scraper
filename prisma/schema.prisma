generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------ APP SCHEMA TABLES ------------------
model Organization {
  id            String       @id @default(cuid())
  name          String
  description   String?
  website       String?
  newsUrl       String?      // URL to organization's news/articles page (e.g., /news, /blog, /press-releases)
  tags          String[]     // Categorization tags (e.g., healthcare, education, international)
  ein           String?      // Employer Identification Number
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  articles      Article[]
  discoverySessions   DiscoverySession[]
}

model Article {
  id             String    @id @default(cuid())
  organizationId String
  url            String    @unique
  title          String
  summary        String?
  content        String?   // Full markdown content
  author         String?
  publishedAt    DateTime?
  ogImage        String?   // og:image URL (selected main image)
  images         String[]  // Array of all discovered images from the page
  sentiment      String?   // pos | neu | neg
  keywords       String[]
  canonicalUrl   String?
  inspirationRating String? // low | medium | high - how inspiring/transformational the story is
  
  // Content validation results
  organizationSentiment String? // positive | neutral | negative - sentiment toward the organization specifically
  contentType          String? // news | press_release | blog_post | list_view | other
  organizationRelevance String? // high | medium | low - how much the article is about the organization
  validationReasons    String[] // reasons for acceptance/rejection
  
  // Processing status
  status         String    @default("draft") // draft | processing | published | failed | rejected
  featured       Boolean   @default(false)   // Whether this article is featured in spotlight
  
  // Metadata
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  @@index([organizationId])
  @@index([publishedAt])
  @@index([status])
}


// ------------------ NEW PIPELINE TABLES ------------------

model DiscoverySession {
  id              String    @id @default(cuid())
  organizationId  String
  newsUrl         String
  status          String    @default("discovering") // discovering | ready_for_review | reviewed | scraping | analyzing | finalizing | completed | cancelled
  totalUrls       Int       @default(0)
  selectedUrls    Int       @default(0)
  processedUrls   Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  organization    Organization    @relation(fields: [organizationId], references: [id])
  discoveredUrls  DiscoveredUrl[]
  scrapedContent  ScrapedContent[]
  
  @@index([organizationId])
  @@index([status])
}

model DiscoveredUrl {
  id                  String    @id @default(cuid())
  discoverySessionId  String
  url                 String
  urlType             String    // news | post
  domain              String
  titlePreview        String?
  selectedForScraping Boolean   @default(false)
  scrapeStatus        String    @default("pending") // pending | scraping | scraped | failed | skipped
  createdAt           DateTime  @default(now())
  
  // Relations
  discoverySession    DiscoverySession @relation(fields: [discoverySessionId], references: [id], onDelete: Cascade)
  scrapedContent      ScrapedContent?
  
  @@index([discoverySessionId])
}

model ScrapedContent {
  id                      String    @id @default(cuid())
  discoveredUrlId         String    @unique
  discoverySessionId      String
  title                   String?
  summary                 String?
  markdownContent         String?
  keywords                String[]
  author                  String?   // Article author from extraction
  publishedAt             DateTime? // Article publication date from extraction
  sentimentScore          Int?      // -1 to 3
  sentimentReasoning      String?
  selectedForFinalization Boolean   @default(false)
  createdAt               DateTime  @default(now())
  
  // Relations
  discoveredUrl           DiscoveredUrl    @relation(fields: [discoveredUrlId], references: [id], onDelete: Cascade)
  discoverySession        DiscoverySession @relation(fields: [discoverySessionId], references: [id], onDelete: Cascade)
  
  @@index([discoverySessionId])
}

