generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------ APP SCHEMA TABLES ------------------
model Organization {
  id            String       @id @default(cuid())
  name          String
  description   String?
  website       String?
  newsUrl       String?      // URL to organization's news/articles page (e.g., /news, /blog, /press-releases)
  tags          String[]     // Categorization tags (e.g., healthcare, education, international)
  ein           String?      // Employer Identification Number
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  articles      Article[]
  aiRuns        AiRun[]
  urlDiscoveryBatches UrlDiscoveryBatch[]
}

model Article {
  id             String    @id @default(cuid())
  organizationId String
  url            String    @unique
  title          String
  summary        String?
  content        String?   // Full markdown content
  author         String?
  publishedAt    DateTime?
  ogImage        String?   // og:image URL (selected main image)
  images         String[]  // Array of all discovered images from the page
  sentiment      String?   // pos | neu | neg
  keywords       String[]
  canonicalUrl   String?
  inspirationRating String? // low | medium | high - how inspiring/transformational the story is
  
  // Content validation results
  organizationSentiment String? // positive | neutral | negative - sentiment toward the organization specifically
  contentType          String? // news | press_release | blog_post | list_view | other
  organizationRelevance String? // high | medium | low - how much the article is about the organization
  validationReasons    String[] // reasons for acceptance/rejection
  
  // Processing status
  status         String    @default("draft") // draft | processing | published | failed | rejected
  featured       Boolean   @default(false)   // Whether this article is featured in spotlight
  
  // Metadata
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])
  rawDocument    RawDocument?
  enrichment     Enrichment?
  aiRuns         AiRun[]
  
  @@index([organizationId])
  @@index([publishedAt])
  @@index([status])
}

model RawDocument {
  id            String   @id @default(cuid())
  articleId     String   @unique
  url           String
  html          String?
  markdown      String?
  text          String?
  httpStatus    Int?
  fetchedAt     DateTime @default(now())
  
  // Relations
  article       Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model Enrichment {
  id            String   @id @default(cuid())
  articleId     String   @unique
  title         String?
  author        String?
  publishedAt   DateTime?
  summary       String?
  keywords      String[]
  sentiment     String?   // pos | neu | neg
  entitiesJson  Json?
  canonicalUrl  String?
  
  // Relations
  article       Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model AiRun {
  id            String   @id @default(cuid())
  
  // Run metadata
  status        String   // running | completed | failed
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  duration      Int?     // milliseconds
  
  // Input data
  inputUrl      String
  organizationId String
  
  // Pipeline state and steps
  stepsData     Json     // Stores the complete pipeline state and step details
  
  // Output data
  articleId     String?
  success       Boolean  @default(false)
  errorMessage  String?
  
  // Relations
  organization  Organization @relation(fields: [organizationId], references: [id])
  article       Article?     @relation(fields: [articleId], references: [id])
  
  @@index([status])
  @@index([startedAt])
  @@index([organizationId])
}

model UrlDiscoveryBatch {
  id                    String   @id @default(cuid())
  organizationId        String
  
  // Batch metadata
  status                String   // discovering | ready_for_processing | processing | completed | failed
  timeframe            Int      // days to look back for articles
  
  // Discovery results
  discoveredUrls       String[] // URLs found during discovery
  totalUrls            Int      @default(0)
  processedUrls        Int      @default(0)
  successfulUrls       Int      @default(0)
  failedUrls           Int      @default(0)
  
  // Processing results
  processingResults    Json?    // Detailed results of URL processing
  
  // Timestamps
  startedAt            DateTime @default(now())
  discoveredAt         DateTime?
  processingStartedAt  DateTime?
  completedAt          DateTime?
  
  // Relations
  organization         Organization @relation(fields: [organizationId], references: [id])
  
  @@index([organizationId])
  @@index([status])
  @@index([startedAt])
}
